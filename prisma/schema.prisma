// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  name           String
  email          String           @unique
  password       String
  role           Role
  projects       Project[]        @relation("UserProjects")
  managedProjects Project[]       @relation("AdminProjects")
  tasksAssigned  Task[]           @relation("AssignedTasks")
  tasksCreated   Task[]           @relation("CreatedTasks")
  notifications  Notification[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Project {
  id            Int              @id @default(autoincrement())
  title         String
  admin         User[]           @relation("AdminProjects")
  users         User[]           @relation("UserProjects")
  tasks         Task[]
  notifications Notification[]   @relation("ProjectNotifications")
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model Task {
  id          Int              @id @default(autoincrement())
  title       String
  description String
  status      Status
  deadline    DateTime
  assignedTo  User             @relation("AssignedTasks", fields: [userId], references: [id])
  userId      Int
  createdBy   User             @relation("CreatedTasks", fields: [adminId], references: [id])
  adminId     Int
  project     Project          @relation(fields: [projectId], references: [id])
  projectId   Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Notification {
  id          Int      @id @default(autoincrement())
  content     String
  isRead      Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  project     Project? @relation("ProjectNotifications", fields: [projectId], references: [id])
  projectId   Int?
  createdAt   DateTime @default(now())
}

enum Role {
  ADMIN
  USER
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
}
